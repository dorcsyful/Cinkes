#version 460 core
out vec4 FragColor;

struct DirLight {
    vec3 direction;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct PointLight {
    vec3 position;
    
    float constant;
    float linear;
    float quadratic;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

in vec2 TexCoord;
in vec3 Position;
in vec3 Normal;


// texture samplers
uniform sampler2D baseColorTexture;
uniform vec3 baseColor;
uniform uint hasTexture;

//Light data
uniform vec3 viewPos;
uniform DirLight dirLight;
uniform PointLight pointLights[16];
uniform int numberOfPointLights;
uniform int numberOfDirectionalLights;

// calculates the color when using a directional light.
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir, vec3 color)
{
    vec3 lightDir = normalize(-light.direction);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.f);
    // combine results
    vec3 ambient = light.ambient * vec3(color);
    vec3 diffuse = light.diffuse * diff * vec3(color);
    vec3 specular = light.specular * spec * vec3(color);
    return (ambient + diffuse + specular);
}

// calculates the color when using a point light.
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir, vec3 color)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.f);
    // attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    // combine results
    vec3 ambient = light.ambient * vec3(color);
    vec3 diffuse = light.diffuse * diff * vec3(color);
    vec3 specular = light.specular * spec * vec3(color);
    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
}



void main()
{
	vec3 color;
	if(hasTexture == 0)
	{
		color = texture(baseColorTexture, TexCoord).xyz;
		color = color * baseColor;
	}
	else
	{
		color = baseColor;
	}

    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - Position);
    vec3 result;
    for(int i = 0; i < numberOfPointLights; i++)
        result = CalcDirLight(dirLight, norm, viewDir, color);
    for(int i = 0; i < numberOfPointLights; i++)
        result += CalcPointLight(pointLights[i], norm, Position, viewDir, color);     
    
    FragColor = vec4(result, 1.0);
}

