#version 460 core
out vec4 FragColor;

in vec2 TexCoord;
in vec3 Position;
in vec3 Normal;


// texture samplers
uniform sampler2D baseColorTexture;
uniform vec3 baseColor;
uniform uint hasTexture;

//Light data
uniform vec3 lightPos; 
uniform vec3 viewPos; 
uniform vec3 lightColor;

void main()
{
	vec3 color;
	if(hasTexture == 0)
	{
		color = texture(baseColorTexture, TexCoord).xyz;
		color = color * baseColor;
	}
	else
	{
		color = baseColor;
	}

	 // ambient
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;
  	
    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - Position);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    
    // specular
    float specularStrength = 0.5;
    vec3 viewDir = normalize(viewPos - Position);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;  
        
    vec3 result = (ambient + diffuse + specular) * color;
    FragColor = vec4(result, 1.0);
}